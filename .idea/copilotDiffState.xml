<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/backend/research-assistance/src/main/java/com/research/assistance/ResearchController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/research-assistance/src/main/java/com/research/assistance/ResearchController.java" />
              <option name="originalContent" value="package com.research.assistance;&#10;&#10;import jakarta.validation.Valid;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/research&quot;)&#10;@CrossOrigin(origins = &quot;*&quot;)&#10;@RequiredArgsConstructor&#10;public class ResearchController {&#10;&#10;  private final ResearchService researchService;&#10;&#10;  @PostMapping(&quot;/process&quot;)&#10;  public ResponseEntity&lt;String&gt; processResearch(&#10;      @Valid @RequestBody ResearchDto.ResearchRequest request) {&#10;&#10;    return ResponseEntity.ok(researchService.processQuery(request));&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="package com.research.assistance;&#10;&#10;import jakarta.validation.Valid;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/research&quot;)&#10;@CrossOrigin(origins = &quot;*&quot;, allowedHeaders = &quot;*&quot;, methods = {RequestMethod.POST, RequestMethod.OPTIONS})&#10;@RequiredArgsConstructor&#10;public class ResearchController {&#10;&#10;  private final ResearchService researchService;&#10;&#10;  @PostMapping(&quot;/process&quot;)&#10;  public ResponseEntity&lt;String&gt; processResearch(&#10;      @Valid @RequestBody ResearchDto.ResearchRequest request) {&#10;&#10;    return ResponseEntity.ok(researchService.processQuery(request));&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/research-assistance/src/main/java/com/research/assistance/ResearchDto.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/research-assistance/src/main/java/com/research/assistance/ResearchDto.java" />
              <option name="originalContent" value="package com.research.assistance;&#10;&#10;import com.fasterxml.jackson.annotation.JsonIgnoreProperties;&#10;import jakarta.validation.constraints.NotNull;&#10;import java.util.List;&#10;import lombok.Builder;&#10;&#10;public record ResearchDto() {&#10;&#10;  @Builder&#10;  public record ResearchRequest(@NotNull String content, @NotNull OperationType operationType) {}&#10;&#10;  public enum OperationType {&#10;    SUMMARIZE,&#10;    EXPLAIN,&#10;    COMPARE,&#10;    CONTRAST,&#10;    ANALYZE,&#10;    EVALUATE,&#10;    SYNTHESIZE,&#10;    DESCRIBE,&#10;    INTERPRET,&#10;    CRITIQUE&#10;  }&#10;&#10;  @Builder&#10;  @JsonIgnoreProperties(ignoreUnknown = true)&#10;  public record GeminiResponse(&#10;      List&lt;Candidate&gt; candidates,&#10;      String responseId,&#10;      String modelVersion,&#10;      UsageMetadata usageMetadata) {}&#10;&#10;  @JsonIgnoreProperties(ignoreUnknown = true)&#10;  public record UsageMetadata(&#10;      String promptTokenCount, String candidatesTokenCount, int totalTokenCount) {}&#10;&#10;  @JsonIgnoreProperties(ignoreUnknown = true)&#10;  public record Candidate(Content content, String finishReason, String avgLogprobs) {}&#10;&#10;  @JsonIgnoreProperties(ignoreUnknown = true)&#10;  public record Content(List&lt;Part&gt; parts) {}&#10;&#10;  @JsonIgnoreProperties(ignoreUnknown = true)&#10;  public record Part(String text) {}&#10;}&#10;" />
              <option name="updatedContent" value="package com.research.assistance;&#10;&#10;import com.fasterxml.jackson.annotation.JsonIgnoreProperties;&#10;import jakarta.validation.constraints.NotNull;&#10;import java.util.List;&#10;import lombok.Builder;&#10;&#10;public record ResearchDto() {&#10;&#10;  @Builder&#10;  public record ResearchRequest(@NotNull String content, @NotNull OperationType operationType) {}&#10;&#10;  public enum OperationType {&#10;    SUMMARIZE,&#10;    EXPLAIN,&#10;    COMPARE,&#10;    CONTRAST,&#10;    ANALYZE,&#10;    EVALUATE,&#10;    SYNTHESIZE,&#10;    DESCRIBE,&#10;    INTERPRET,&#10;    CRITIQUE,&#10;    SEARCH&#10;  }&#10;&#10;  @Builder&#10;  @JsonIgnoreProperties(ignoreUnknown = true)&#10;  public record GeminiResponse(&#10;      List&lt;Candidate&gt; candidates,&#10;      String responseId,&#10;      String modelVersion,&#10;      UsageMetadata usageMetadata) {}&#10;&#10;  @JsonIgnoreProperties(ignoreUnknown = true)&#10;  public record UsageMetadata(&#10;      String promptTokenCount, String candidatesTokenCount, int totalTokenCount) {}&#10;&#10;  @JsonIgnoreProperties(ignoreUnknown = true)&#10;  public record Candidate(Content content, String finishReason, String avgLogprobs) {}&#10;&#10;  @JsonIgnoreProperties(ignoreUnknown = true)&#10;  public record Content(List&lt;Part&gt; parts) {}&#10;&#10;  @JsonIgnoreProperties(ignoreUnknown = true)&#10;  public record Part(String text) {}&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/backend/research-assistance/src/main/java/com/research/assistance/ResearchService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/backend/research-assistance/src/main/java/com/research/assistance/ResearchService.java" />
              <option name="originalContent" value="package com.research.assistance;&#10;&#10;import com.fasterxml.jackson.databind.ObjectMapper;&#10;import java.util.Map;&#10;import java.util.Objects;&#10;import lombok.RequiredArgsConstructor;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.util.CollectionUtils;&#10;import org.springframework.web.reactive.function.client.WebClient;&#10;&#10;@Slf4j&#10;@Service&#10;@RequiredArgsConstructor&#10;public class ResearchService {&#10;&#10;  private final WebClient webClient = WebClient.builder().build();&#10;&#10;  @Value(&quot;${app.gemini.api.url}&quot;)&#10;  private String geminiApiUrl;&#10;&#10;  @Value(&quot;${app.gemini.api.key}&quot;)&#10;  private String geminiApiKey;&#10;&#10;  public String processQuery(ResearchDto.ResearchRequest request) {&#10;&#10;    var requestBody =&#10;        Map.of(&#10;            &quot;contents&quot;,&#10;            new Object[] {&#10;              Map.of(&quot;parts&quot;, new Object[] {Map.of(&quot;text&quot;, this.buildPrompt(request))})&#10;            });&#10;&#10;    var format = String.format(&quot;%s%s&quot;, geminiApiUrl, geminiApiKey);&#10;&#10;    var response =&#10;        webClient&#10;            .post()&#10;            .uri(format)&#10;            .bodyValue(requestBody)&#10;            .retrieve()&#10;            .bodyToMono(String.class)&#10;            .block();&#10;&#10;    return parseResponse(response);&#10;  }&#10;&#10;  private String parseResponse(String geminiResponse) {&#10;    try {&#10;      log.info(&quot;Gemini Response: {}&quot;, geminiResponse);&#10;      var response = new ObjectMapper().readValue(geminiResponse, ResearchDto.GeminiResponse.class);&#10;&#10;      if (Objects.nonNull(response) &amp;&amp; !CollectionUtils.isEmpty(response.candidates())) {&#10;        var candidate = response.candidates().getFirst();&#10;        if (Objects.nonNull(candidate.content())&#10;            &amp;&amp; !CollectionUtils.isEmpty(candidate.content().parts())) {&#10;          return &quot;&lt;p&gt; &quot; + candidate.content().parts().getFirst().text() + &quot;&lt;/p&gt;&quot;;&#10;        }&#10;      }&#10;&#10;    } catch (Exception e) {&#10;      throw new RuntimeException(&quot;Error while parsing the response: &quot; + e.getMessage(), e);&#10;    }&#10;    return &quot;No Content found from response&quot;;&#10;  }&#10;&#10;  private String buildPrompt(ResearchDto.ResearchRequest request) {&#10;&#10;    StringBuilder promptBuilder = new StringBuilder();&#10;&#10;    switch (request.operationType()) {&#10;      case SUMMARIZE -&gt;&#10;          promptBuilder.append(&#10;              &quot;Provide a clear and concise summary of the following content in a few sentences: \n\n&quot;);&#10;      case EXPLAIN -&gt;&#10;          promptBuilder.append(&#10;              &quot;Based on the following content: suggest related topics and further reading. Format the response with clear headings and bulleted points:\n\n&quot;);&#10;      case ANALYZE -&gt;&#10;          promptBuilder.append(&#10;              &quot;Provide a detailed analysis of the following content, breaking down its key components and examining their relationships: \n\n&quot;);&#10;      case EVALUATE -&gt;&#10;          promptBuilder.append(&#10;              &quot;Critically evaluate the following content, assessing its strengths, weaknesses, and overall effectiveness: \n\n&quot;);&#10;      default -&gt;&#10;          throw new IllegalArgumentException(&#10;              &quot;Unsupported operation type: &quot; + request.operationType());&#10;    }&#10;    promptBuilder.append(request.content());&#10;    return promptBuilder.toString();&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="package com.research.assistance;&#10;&#10;import com.fasterxml.jackson.databind.ObjectMapper;&#10;import java.util.Map;&#10;import java.util.Objects;&#10;import lombok.RequiredArgsConstructor;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.util.CollectionUtils;&#10;import org.springframework.web.reactive.function.client.WebClient;&#10;&#10;@Slf4j&#10;@Service&#10;@RequiredArgsConstructor&#10;public class ResearchService {&#10;&#10;  private final WebClient webClient = WebClient.builder().build();&#10;&#10;  @Value(&quot;${app.gemini.api.url}&quot;)&#10;  private String geminiApiUrl;&#10;&#10;  @Value(&quot;${app.gemini.api.key}&quot;)&#10;  private String geminiApiKey;&#10;&#10;  public String processQuery(ResearchDto.ResearchRequest request) {&#10;&#10;    var requestBody =&#10;        Map.of(&#10;            &quot;contents&quot;,&#10;            new Object[] {&#10;              Map.of(&quot;parts&quot;, new Object[] {Map.of(&quot;text&quot;, this.buildPrompt(request))})&#10;            });&#10;&#10;    var format = String.format(&quot;%s%s&quot;, geminiApiUrl, geminiApiKey);&#10;&#10;    var response =&#10;        webClient&#10;            .post()&#10;            .uri(format)&#10;            .bodyValue(requestBody)&#10;            .retrieve()&#10;            .bodyToMono(String.class)&#10;            .block();&#10;&#10;    return parseResponse(response);&#10;  }&#10;&#10;  private String parseResponse(String geminiResponse) {&#10;    try {&#10;      log.info(&quot;Gemini Response: {}&quot;, geminiResponse);&#10;      var response = new ObjectMapper().readValue(geminiResponse, ResearchDto.GeminiResponse.class);&#10;&#10;      if (Objects.nonNull(response) &amp;&amp; !CollectionUtils.isEmpty(response.candidates())) {&#10;        var candidate = response.candidates().getFirst();&#10;        if (Objects.nonNull(candidate.content())&#10;            &amp;&amp; !CollectionUtils.isEmpty(candidate.content().parts())) {&#10;          return &quot;&lt;p&gt; &quot; + candidate.content().parts().getFirst().text() + &quot;&lt;/p&gt;&quot;;&#10;        }&#10;      }&#10;&#10;    } catch (Exception e) {&#10;      throw new RuntimeException(&quot;Error while parsing the response: &quot; + e.getMessage(), e);&#10;    }&#10;    return &quot;No Content found from response&quot;;&#10;  }&#10;&#10;  private String buildPrompt(ResearchDto.ResearchRequest request) {&#10;&#10;    StringBuilder promptBuilder = new StringBuilder();&#10;&#10;    switch (request.operationType()) {&#10;      case SUMMARIZE -&gt;&#10;          promptBuilder.append(&#10;              &quot;Provide a clear and concise summary of the following content in a few sentences: \n\n&quot;);&#10;      case EXPLAIN -&gt;&#10;          promptBuilder.append(&#10;              &quot;Based on the following content: suggest related topics and further reading. Format the response with clear headings and bulleted points:\n\n&quot;);&#10;      case ANALYZE -&gt;&#10;          promptBuilder.append(&#10;              &quot;Provide a detailed analysis of the following content, breaking down its key components and examining their relationships: \n\n&quot;);&#10;      case EVALUATE -&gt;&#10;          promptBuilder.append(&#10;              &quot;Critically evaluate the following content, assessing its strengths, weaknesses, and overall effectiveness: \n\n&quot;);&#10;      case SEARCH -&gt;&#10;          promptBuilder.append(&#10;              &quot;For the given term, provide:\n1. Definition: A clear and comprehensive definition\n&quot; +&#10;              &quot;2. Examples: At least 2 practical examples of usage or application\n&quot; +&#10;              &quot;3. Related Concepts: Key related terms or concepts\n\nTerm to search: &quot;);&#10;      default -&gt;&#10;          throw new IllegalArgumentException(&#10;              &quot;Unsupported operation type: &quot; + request.operationType());&#10;    }&#10;    promptBuilder.append(request.content());&#10;    return promptBuilder.toString();&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/extension/sidepanel.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/extension/sidepanel.css" />
              <option name="originalContent" value=":root {&#10;    --primary-color: #2196f3;&#10;    --primary-dark: #1976d2;&#10;    --text-color: #333;&#10;    --background-color: #f5f5f5;&#10;    --card-background: #ffffff;&#10;    --border-radius: 8px;&#10;    --spacing: 16px;&#10;}&#10;&#10;* {&#10;    margin: 0;&#10;    padding: 0;&#10;    box-sizing: border-box;&#10;}&#10;&#10;body {&#10;    font-family: 'Segoe UI', system-ui, -apple-system, sans-serif;&#10;    background-color: var(--background-color);&#10;    color: var(--text-color);&#10;    line-height: 1.6;&#10;}&#10;&#10;.container {&#10;    max-width: 800px;&#10;    margin: 0 auto;&#10;    padding: var(--spacing);&#10;}&#10;&#10;.header {&#10;    background-color: var(--card-background);&#10;    padding: var(--spacing);&#10;    border-radius: var(--border-radius);&#10;    margin-bottom: var(--spacing);&#10;    text-align: center;&#10;    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);&#10;}&#10;&#10;.header h2 {&#10;    margin: 0;&#10;    font-size: 1.5rem;&#10;}&#10;&#10;.header-icon {&#10;    height: 48px;&#10;    width: 48px;&#10;    object-fit: contain;&#10;}&#10;&#10;.actions {&#10;    display: grid;&#10;    grid-template-columns: repeat(2, 1fr);&#10;    gap: 10px;&#10;    margin-bottom: var(--spacing);&#10;}&#10;&#10;.actions button {&#10;    padding: 10px 15px;&#10;    border: none;&#10;    background-color: var(--primary-color);&#10;    color: white;&#10;    border-radius: var(--border-radius);&#10;    cursor: pointer;&#10;    transition: background-color 0.2s, transform 0.1s;&#10;    font-weight: 500;&#10;    text-transform: uppercase;&#10;    letter-spacing: 0.5px;&#10;}&#10;&#10;.actions button:hover {&#10;    background-color: var(--primary-dark);&#10;    transform: translateY(-1px);&#10;}&#10;&#10;.actions button:active {&#10;    transform: translateY(0);&#10;}&#10;&#10;.notes {&#10;    background-color: var(--card-background);&#10;    padding: var(--spacing);&#10;    border-radius: var(--border-radius);&#10;    margin-bottom: var(--spacing);&#10;    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);&#10;}&#10;&#10;.notes h3 {&#10;    margin-bottom: 10px;&#10;    color: var(--text-color);&#10;}&#10;&#10;#notes {&#10;    width: 100%;&#10;    min-height: 150px;&#10;    padding: 12px;&#10;    border: 1px solid #ddd;&#10;    border-radius: var(--border-radius);&#10;    margin-bottom: 15px;&#10;    resize: vertical;&#10;    font-family: inherit;&#10;    line-height: 1.5;&#10;}&#10;&#10;#notes:focus {&#10;    outline: none;&#10;    border-color: var(--primary-color);&#10;    box-shadow: 0 0 0 2px rgba(33, 150, 243, 0.1);&#10;}&#10;&#10;#saveNotesBtn {&#10;    width: auto;&#10;    min-width: 120px;&#10;    padding: 10px;&#10;    background-color: var(--primary-color);&#10;    color: white;&#10;    border: none;&#10;    border-radius: var(--border-radius);&#10;    cursor: pointer;&#10;    font-weight: 500;&#10;    transition: background-color 0.2s;&#10;}&#10;&#10;#saveNotesBtn:hover {&#10;    background-color: var(--primary-dark);&#10;}&#10;&#10;.operation-selector {&#10;    display: flex;&#10;    gap: 10px;&#10;    margin-top: 15px;&#10;    align-items: center;&#10;}&#10;&#10;#operationSelect {&#10;    flex: 1;&#10;    padding: 10px 12px;&#10;    border: 1px solid #ddd;&#10;    border-radius: var(--border-radius);&#10;    font-family: inherit;&#10;    font-size: 14px;&#10;    background-color: white;&#10;    cursor: pointer;&#10;    appearance: none;&#10;    background-image: url(&quot;data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22292.4%22%20height%3D%22292.4%22%3E%3Cpath%20fill%3D%22%23666%22%20d%3D%22M287%2069.4a17.6%2017.6%200%200%200-13-5.4H18.4c-5%200-9.3%201.8-12.9%205.4A17.6%2017.6%200%200%200%200%2082.2c0%205%201.8%209.3%205.4%2012.9l128%20127.9c3.6%203.6%207.8%205.4%2012.8%205.4s9.2-1.8%2012.8-5.4L287%2095c3.5-3.5%205.4-7.8%205.4-12.8%200-5-1.9-9.2-5.4-12.8z%22%2F%3E%3C%2Fsvg%3E&quot;);&#10;    background-repeat: no-repeat;&#10;    background-position: right 12px center;&#10;    background-size: 12px;&#10;    padding-right: 30px;&#10;}&#10;&#10;#operationSelect:focus {&#10;    outline: none;&#10;    border-color: var(--primary-color);&#10;    box-shadow: 0 0 0 2px rgba(33, 150, 243, 0.1);&#10;}&#10;&#10;#processBtn {&#10;    padding: 10px 24px;&#10;    background-color: #4CAF50;&#10;    color: white;&#10;    border: none;&#10;    border-radius: var(--border-radius);&#10;    cursor: pointer;&#10;    font-weight: 500;&#10;    transition: all 0.2s ease;&#10;    font-size: 14px;&#10;    min-width: 100px;&#10;    text-transform: uppercase;&#10;    letter-spacing: 0.5px;&#10;}&#10;&#10;#processBtn:hover {&#10;    background-color: #45a049;&#10;    transform: translateY(-1px);&#10;}&#10;&#10;#processBtn:active {&#10;    transform: translateY(0);&#10;}&#10;&#10;#results {&#10;    background-color: var(--card-background);&#10;    border-radius: var(--border-radius);&#10;    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);&#10;}&#10;&#10;.result-item {&#10;    padding: var(--spacing);&#10;    border-bottom: 1px solid #eee;&#10;}&#10;&#10;.result-item:last-child {&#10;    border-bottom: none;&#10;}&#10;&#10;.result-content {&#10;    line-height: 1.6;&#10;    color: var(--text-color);&#10;}&#10;&#10;/* Responsive adjustments */&#10;@media (max-width: 600px) {&#10;    .container {&#10;        padding: 10px;&#10;    }&#10;&#10;    .actions {&#10;        grid-template-columns: 1fr 1fr;&#10;    }&#10;&#10;    .header {&#10;        padding: 12px;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value=":root {&#10;    --primary-color: #2196f3;&#10;    --primary-dark: #1976d2;&#10;    --text-color: #333;&#10;    --background-color: #f5f5f5;&#10;    --card-background: #ffffff;&#10;    --border-radius: 8px;&#10;    --spacing: 16px;&#10;}&#10;&#10;* {&#10;    margin: 0;&#10;    padding: 0;&#10;    box-sizing: border-box;&#10;}&#10;&#10;body {&#10;    font-family: 'Segoe UI', system-ui, -apple-system, sans-serif;&#10;    background-color: var(--background-color);&#10;    color: var(--text-color);&#10;    line-height: 1.6;&#10;}&#10;&#10;.container {&#10;    max-width: 800px;&#10;    margin: 0 auto;&#10;    padding: var(--spacing);&#10;}&#10;&#10;.header {&#10;    display: flex;&#10;    justify-content: flex-end;&#10;    padding: var(--spacing);&#10;    margin-bottom: var(--spacing);&#10;}&#10;&#10;.header h2 {&#10;    margin: 0;&#10;    font-size: 1.5rem;&#10;}&#10;&#10;.header-icon {&#10;    height: 48px;&#10;    width: 48px;&#10;    object-fit: contain;&#10;}&#10;&#10;.actions {&#10;    display: grid;&#10;    grid-template-columns: repeat(2, 1fr);&#10;    gap: 10px;&#10;    margin-bottom: var(--spacing);&#10;}&#10;&#10;.actions button {&#10;    padding: 10px 15px;&#10;    border: none;&#10;    background-color: var(--primary-color);&#10;    color: white;&#10;    border-radius: var(--border-radius);&#10;    cursor: pointer;&#10;    transition: background-color 0.2s, transform 0.1s;&#10;    font-weight: 500;&#10;    text-transform: uppercase;&#10;    letter-spacing: 0.5px;&#10;}&#10;&#10;.actions button:hover {&#10;    background-color: var(--primary-dark);&#10;    transform: translateY(-1px);&#10;}&#10;&#10;.actions button:active {&#10;    transform: translateY(0);&#10;}&#10;&#10;.notes {&#10;    background-color: var(--card-background);&#10;    padding: var(--spacing);&#10;    border-radius: var(--border-radius);&#10;    margin-bottom: var(--spacing);&#10;    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);&#10;}&#10;&#10;.notes h3 {&#10;    margin-bottom: 10px;&#10;    color: var(--text-color);&#10;}&#10;&#10;#notes {&#10;    width: 100%;&#10;    min-height: 150px;&#10;    padding: 12px;&#10;    border: 1px solid #ddd;&#10;    border-radius: var(--border-radius);&#10;    margin-bottom: 15px;&#10;    resize: vertical;&#10;    font-family: inherit;&#10;    line-height: 1.5;&#10;}&#10;&#10;#notes:focus {&#10;    outline: none;&#10;    border-color: var(--primary-color);&#10;    box-shadow: 0 0 0 2px rgba(33, 150, 243, 0.1);&#10;}&#10;&#10;#saveNotesBtn {&#10;    width: auto;&#10;    min-width: 120px;&#10;    padding: 10px;&#10;    background-color: var(--primary-color);&#10;    color: white;&#10;    border: none;&#10;    border-radius: var(--border-radius);&#10;    cursor: pointer;&#10;    font-weight: 500;&#10;    transition: background-color 0.2s;&#10;}&#10;&#10;#saveNotesBtn:hover {&#10;    background-color: var(--primary-dark);&#10;}&#10;&#10;.operation-selector {&#10;    display: flex;&#10;    gap: 10px;&#10;    margin-top: 15px;&#10;    align-items: center;&#10;}&#10;&#10;#operationSelect {&#10;    flex: 1;&#10;    padding: 10px 12px;&#10;    border: 1px solid #ddd;&#10;    border-radius: var(--border-radius);&#10;    font-family: inherit;&#10;    font-size: 14px;&#10;    background-color: white;&#10;    cursor: pointer;&#10;    appearance: none;&#10;    background-image: url(&quot;data:image/svg+xml;charset=US-ASCII,%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20width%3D%22292.4%22%20height%3D%22292.4%22%3E%3Cpath%20fill%3D%22%23666%22%20d%3D%22M287%2069.4a17.6%2017.6%200%200%200-13-5.4H18.4c-5%200-9.3%201.8-12.9%205.4A17.6%2017.6%200%200%200%200%2082.2c0%205%201.8%209.3%205.4%2012.9l128%20127.9c3.6%203.6%207.8%205.4%2012.8%205.4s9.2-1.8%2012.8-5.4L287%2095c3.5-3.5%205.4-7.8%205.4-12.8%200-5-1.9-9.2-5.4-12.8z%22%2F%3E%3C%2Fsvg%3E&quot;);&#10;    background-repeat: no-repeat;&#10;    background-position: right 12px center;&#10;    background-size: 12px;&#10;    padding-right: 30px;&#10;}&#10;&#10;#operationSelect:focus {&#10;    outline: none;&#10;    border-color: var(--primary-color);&#10;    box-shadow: 0 0 0 2px rgba(33, 150, 243, 0.1);&#10;}&#10;&#10;#processBtn {&#10;    padding: 10px 24px;&#10;    background-color: #4CAF50;&#10;    color: white;&#10;    border: none;&#10;    border-radius: var(--border-radius);&#10;    cursor: pointer;&#10;    font-weight: 500;&#10;    transition: all 0.2s ease;&#10;    font-size: 14px;&#10;    min-width: 100px;&#10;    text-transform: uppercase;&#10;    letter-spacing: 0.5px;&#10;}&#10;&#10;#processBtn:hover {&#10;    background-color: #45a049;&#10;    transform: translateY(-1px);&#10;}&#10;&#10;#processBtn:active {&#10;    transform: translateY(0);&#10;}&#10;&#10;#results {&#10;    background-color: var(--card-background);&#10;    border-radius: var(--border-radius);&#10;    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);&#10;}&#10;&#10;.result-item {&#10;    padding: var(--spacing);&#10;    border-bottom: 1px solid #eee;&#10;}&#10;&#10;.result-item:last-child {&#10;    border-bottom: none;&#10;}&#10;&#10;.result-content {&#10;    line-height: 1.6;&#10;    color: var(--text-color);&#10;}&#10;&#10;.header {&#10;    display: flex;&#10;    justify-content: flex-end;&#10;    padding: var(--spacing);&#10;    margin-bottom: var(--spacing);&#10;}&#10;&#10;.about-link {&#10;    color: #4CAF50;&#10;    text-decoration: none;&#10;    font-weight: 500;&#10;    font-size: 14px;&#10;    transition: all 0.2s ease;&#10;    padding: 5px 10px;&#10;    border-radius: var(--border-radius);&#10;}&#10;&#10;.about-link:hover {&#10;    color: #45a049;&#10;    background-color: rgba(76, 175, 80, 0.1);&#10;}&#10;&#10;.separator {&#10;    height: 2px;&#10;    background: linear-gradient(to right, transparent, #4CAF50, transparent);&#10;    margin: 0 var(--spacing) var(--spacing);&#10;}&#10;&#10;.about-content {&#10;    background-color: var(--card-background);&#10;    padding: var(--spacing);&#10;    margin: 0 var(--spacing) var(--spacing);&#10;    border-radius: var(--border-radius);&#10;    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);&#10;    border: 1px solid rgba(76, 175, 80, 0.2);&#10;}&#10;&#10;.about-content.hidden {&#10;    display: none;&#10;}&#10;&#10;.about-content h3 {&#10;    color: #4CAF50;&#10;    margin-bottom: 12px;&#10;}&#10;&#10;.about-content p {&#10;    margin-bottom: 12px;&#10;    line-height: 1.6;&#10;}&#10;&#10;.about-content ul {&#10;    margin: 12px 0;&#10;    padding-left: 20px;&#10;}&#10;&#10;.about-content li {&#10;    margin-bottom: 8px;&#10;    line-height: 1.4;&#10;}&#10;&#10;.about-content .close-about {&#10;    background-color: #4CAF50;&#10;    color: white;&#10;    border: none;&#10;    padding: 8px 16px;&#10;    border-radius: var(--border-radius);&#10;    cursor: pointer;&#10;    margin-top: 12px;&#10;    transition: all 0.2s ease;&#10;}&#10;&#10;.about-content .close-about:hover {&#10;    background-color: #45a049;&#10;    transform: translateY(-1px);&#10;}&#10;&#10;/* Responsive adjustments */&#10;@media (max-width: 600px) {&#10;    .container {&#10;        padding: 10px;&#10;    }&#10;&#10;    .actions {&#10;        grid-template-columns: 1fr 1fr;&#10;    }&#10;&#10;    .header {&#10;        padding: 12px;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/extension/sidepanel.html">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/extension/sidepanel.html" />
              <option name="originalContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Research Assistant&lt;/title&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;sidepanel.css&quot;&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;div class=&quot;container&quot;&gt;&#10;        &lt;div class=&quot;header&quot;&gt;&#10;            &lt;img src=&quot;icons/research-assistance.png&quot; alt=&quot;Research Assistant&quot; class=&quot;header-icon&quot;&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div class=&quot;notes&quot;&gt;&#10;            &lt;h3&gt;Research Notes&lt;/h3&gt;&#10;            &lt;textarea id=&quot;notes&quot; placeholder=&quot;Take notes here...&quot;&gt;&lt;/textarea&gt;&#10;&#10;            &lt;div class=&quot;operation-selector&quot;&gt;&#10;                &lt;select id=&quot;operationSelect&quot;&gt;&#10;                    &lt;option value=&quot;&quot;&gt;Select Operation&lt;/option&gt;&#10;                    &lt;option value=&quot;SUMMARIZE&quot;&gt;Summarize&lt;/option&gt;&#10;                    &lt;option value=&quot;EXPLAIN&quot;&gt;Explain&lt;/option&gt;&#10;                &lt;/select&gt;&#10;                &lt;button id=&quot;processBtn&quot;&gt;Search&lt;/button&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div id=&quot;results&quot;&gt;&lt;/div&gt;&#10;    &lt;/div&gt;&#10;    &lt;script src=&quot;sidepanel.js&quot;&gt;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
              <option name="updatedContent" value="&lt;!DOCTYPE html&gt;&#10;&lt;html lang=&quot;en&quot;&gt;&#10;&lt;head&gt;&#10;    &lt;meta charset=&quot;UTF-8&quot;&gt;&#10;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;&#10;    &lt;title&gt;Research Assistant&lt;/title&gt;&#10;    &lt;link rel=&quot;stylesheet&quot; href=&quot;sidepanel.css&quot;&gt;&#10;&lt;/head&gt;&#10;&lt;body&gt;&#10;    &lt;div class=&quot;container&quot;&gt;&#10;        &lt;div class=&quot;header&quot;&gt;&#10;            &lt;a href=&quot;#&quot; id=&quot;aboutLink&quot; class=&quot;about-link&quot;&gt;About Us&lt;/a&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div id=&quot;aboutContent&quot; class=&quot;about-content hidden&quot;&gt;&#10;            &lt;h3&gt;About Research Assistant&lt;/h3&gt;&#10;            &lt;p&gt;Research Assistant is a powerful browser extension designed to enhance your research and learning experience. It helps you:&lt;/p&gt;&#10;            &lt;ul&gt;&#10;                &lt;li&gt;Summarize complex text with a single click&lt;/li&gt;&#10;                &lt;li&gt;Get detailed explanations of selected content&lt;/li&gt;&#10;                &lt;li&gt;Save and organize your research notes&lt;/li&gt;&#10;                &lt;li&gt;Process information from any webpage efficiently&lt;/li&gt;&#10;            &lt;/ul&gt;&#10;            &lt;p&gt;Perfect for students, researchers, and professionals who want to streamline their research process.&lt;/p&gt;&#10;            &lt;button class=&quot;close-about&quot;&gt;Close&lt;/button&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div class=&quot;separator&quot;&gt;&lt;/div&gt;&#10;&#10;        &lt;div class=&quot;notes&quot;&gt;&#10;            &lt;h3&gt;Research Notes&lt;/h3&gt;&#10;            &lt;textarea id=&quot;notes&quot; placeholder=&quot;Take notes here...&quot;&gt;&lt;/textarea&gt;&#10;            &#10;            &lt;div class=&quot;operation-selector&quot;&gt;&#10;                &lt;select id=&quot;operationSelect&quot;&gt;&#10;                    &lt;option value=&quot;&quot;&gt;Select Operation&lt;/option&gt;&#10;                    &lt;option value=&quot;SUMMARIZE&quot;&gt;Summarize&lt;/option&gt;&#10;                    &lt;option value=&quot;EXPLAIN&quot;&gt;Explain&lt;/option&gt;&#10;                &lt;/select&gt;&#10;                &lt;button id=&quot;processBtn&quot;&gt;Search&lt;/button&gt;&#10;            &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;div id=&quot;results&quot;&gt;&lt;/div&gt;&#10;    &lt;/div&gt;&#10;    &lt;script src=&quot;sidepanel.js&quot;&gt;&lt;/script&gt;&#10;&lt;/body&gt;&#10;&lt;/html&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/extension/sidepanel.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/extension/sidepanel.js" />
              <option name="originalContent" value="document.addEventListener('DOMContentLoaded', () =&gt; {&#10;    // Load saved notes and results&#10;    chrome.storage.local.get(['researchNotes', 'lastResults'], function(data) {&#10;        if (data.researchNotes) {&#10;            document.getElementById('notes').value = data.researchNotes;&#10;        }&#10;        if (data.lastResults) {&#10;            showResult(data.lastResults);&#10;        }&#10;    });&#10;&#10;    // Add event listener for process button&#10;    document.getElementById('processBtn').addEventListener('click', handleProcess);&#10;&#10;    // Auto-save notes when typing stops&#10;    let saveTimeout;&#10;    document.getElementById('notes').addEventListener('input', function() {&#10;        clearTimeout(saveTimeout);&#10;        saveTimeout = setTimeout(() =&gt; {&#10;            chrome.storage.local.set({ 'researchNotes': this.value });&#10;        }, 1000); // Save after 1 second of no typing&#10;    });&#10;});&#10;&#10;async function handleProcess() {&#10;    const operationType = document.getElementById('operationSelect').value;&#10;    if (!operationType) {&#10;        showResult('Please select an operation type');&#10;        return;&#10;    }&#10;&#10;    try {&#10;        showResult('Getting current tab...');&#10;        const [tab] = await chrome.tabs.query({active: true, currentWindow: true});&#10;        &#10;        // Check if the current tab is a restricted URL&#10;        if (tab.url &amp;&amp; (tab.url.startsWith('chrome://') || tab.url.startsWith('chrome-extension://') || tab.url.startsWith('edge://') || tab.url.startsWith('about:'))) {&#10;            showResult(`Cannot process text from this page. Please navigate to a regular website and try again.`);&#10;            return;&#10;        }&#10;        &#10;        showResult('Attempting to get selected text...');&#10;        const [result] = await chrome.scripting.executeScript({&#10;            target: {tabId: tab.id},&#10;            function: () =&gt; {&#10;               return window.getSelection().toString();&#10;            }&#10;        });&#10;&#10;        let contentToProcess = '';&#10;&#10;        if(!result.result || result.result.trim() === ''){&#10;           showResult('No text selected. Getting content from research notes...');&#10;           &#10;           const storageResult = await new Promise((resolve) =&gt; {&#10;               chrome.storage.local.get(['researchNotes'], resolve);&#10;           });&#10;           &#10;           if(storageResult.researchNotes &amp;&amp; storageResult.researchNotes.trim() !== '') {&#10;               contentToProcess = storageResult.researchNotes;&#10;               showResult(`Using research notes content (${contentToProcess.length} characters)`);&#10;           } else {&#10;               showResult('No text selected and no research notes available. Please select some text or add some research notes first.');&#10;               return;&#10;           }&#10;        } else {&#10;           contentToProcess = result.result;&#10;        }&#10;        &#10;        showResult('Processing content...');&#10;        try {&#10;            const response = await fetch('http://localhost:8050/api/research/process', {&#10;                method: 'POST',&#10;                headers: {&#10;                    'Content-Type': 'application/json',&#10;                    'Accept': 'application/json'&#10;                },&#10;                body: JSON.stringify({&#10;                    content: contentToProcess,&#10;                    operationType: operationType&#10;                })&#10;            });&#10;&#10;            if (!response.ok) {&#10;                if (response.status === 404) {&#10;                    throw new Error('Backend server is not running. Please start the server and try again.');&#10;                } else if (response.status === 500) {&#10;                    const errorData = await response.text();&#10;                    throw new Error(`Server error: ${errorData}`);&#10;                } else {&#10;                    throw new Error(`HTTP error! status: ${response.status}`);&#10;                }&#10;            }&#10;&#10;            const text = await response.text();&#10;            showResult(text.replace(/\n/g,'&lt;br&gt;'));&#10;&#10;        } catch (fetchError) {&#10;            if (fetchError.message.includes('Failed to fetch')) {&#10;                showResult('Error: Cannot connect to the backend server. Please ensure that:&lt;br&gt;' +&#10;                    '1. The backend server is running on port 8050&lt;br&gt;' +&#10;                    '2. You have set the GEMINI_API_KEY environment variable&lt;br&gt;' +&#10;                    '3. Check the browser console for more details');&#10;                console.error('Connection error:', fetchError);&#10;            } else {&#10;                showResult('Error: ' + fetchError.message);&#10;            }&#10;        }&#10;&#10;    } catch (error) {&#10;        console.error('Processing error:', error);&#10;        showResult('Error: ' + error.message);&#10;    }&#10;}&#10;&#10;async function showResult(content) {&#10;    document.getElementById('results').innerHTML = `&lt;div class=&quot;result-item&quot;&gt;&lt;div class=&quot;result-content&quot;&gt;${content}&lt;/div&gt;&lt;/div&gt;`;&#10;    // Save the result&#10;    chrome.storage.local.set({ 'lastResults': content });&#10;}&#10;" />
              <option name="updatedContent" value="document.addEventListener('DOMContentLoaded', () =&gt; {&#10;    // Load saved notes and results&#10;    chrome.storage.local.get(['researchNotes', 'lastResults'], function(data) {&#10;        if (data.researchNotes) {&#10;            document.getElementById('notes').value = data.researchNotes;&#10;        }&#10;        if (data.lastResults) {&#10;            showResult(data.lastResults);&#10;        }&#10;    });&#10;&#10;    // Add event listener for process button&#10;    document.getElementById('processBtn').addEventListener('click', handleProcess);&#10;&#10;    // Add event listeners for About Us functionality&#10;    document.getElementById('aboutLink').addEventListener('click', function(e) {&#10;        e.preventDefault();&#10;        document.getElementById('aboutContent').classList.remove('hidden');&#10;    });&#10;&#10;    document.querySelector('.close-about').addEventListener('click', function() {&#10;        document.getElementById('aboutContent').classList.add('hidden');&#10;    });&#10;&#10;    // Auto-save notes when typing stops&#10;    let saveTimeout;&#10;    document.getElementById('notes').addEventListener('input', function() {&#10;        clearTimeout(saveTimeout);&#10;        saveTimeout = setTimeout(() =&gt; {&#10;            chrome.storage.local.set({ 'researchNotes': this.value });&#10;        }, 1000); // Save after 1 second of no typing&#10;    });&#10;});&#10;&#10;async function handleProcess() {&#10;    const operationType = document.getElementById('operationSelect').value;&#10;    if (!operationType) {&#10;        showResult('Please select an operation type');&#10;        return;&#10;    }&#10;&#10;    try {&#10;        showResult('Getting current tab...');&#10;        const [tab] = await chrome.tabs.query({active: true, currentWindow: true});&#10;        &#10;        // Check if the current tab is a restricted URL&#10;        if (tab.url &amp;&amp; (tab.url.startsWith('chrome://') || tab.url.startsWith('chrome-extension://') || tab.url.startsWith('edge://') || tab.url.startsWith('about:'))) {&#10;            showResult(`Cannot process text from this page. Please navigate to a regular website and try again.`);&#10;            return;&#10;        }&#10;        &#10;        showResult('Attempting to get selected text...');&#10;        const [result] = await chrome.scripting.executeScript({&#10;            target: {tabId: tab.id},&#10;            function: () =&gt; {&#10;               return window.getSelection().toString();&#10;            }&#10;        });&#10;&#10;        let contentToProcess = '';&#10;&#10;        if(!result.result || result.result.trim() === ''){&#10;           showResult('No text selected. Getting content from research notes...');&#10;           &#10;           const storageResult = await new Promise((resolve) =&gt; {&#10;               chrome.storage.local.get(['researchNotes'], resolve);&#10;           });&#10;           &#10;           if(storageResult.researchNotes &amp;&amp; storageResult.researchNotes.trim() !== '') {&#10;               contentToProcess = storageResult.researchNotes;&#10;               showResult(`Using research notes content (${contentToProcess.length} characters)`);&#10;           } else {&#10;               showResult('No text selected and no research notes available. Please select some text or add some research notes first.');&#10;               return;&#10;           }&#10;        } else {&#10;           contentToProcess = result.result;&#10;        }&#10;        &#10;        showResult('Processing content...');&#10;        try {&#10;            const response = await fetch('http://localhost:8050/api/research/process', {&#10;                method: 'POST',&#10;                headers: {&#10;                    'Content-Type': 'application/json',&#10;                    'Accept': 'application/json'&#10;                },&#10;                body: JSON.stringify({&#10;                    content: contentToProcess,&#10;                    operationType: operationType&#10;                })&#10;            });&#10;&#10;            if (!response.ok) {&#10;                if (response.status === 404) {&#10;                    throw new Error('Backend server is not running. Please start the server and try again.');&#10;                } else if (response.status === 500) {&#10;                    const errorData = await response.text();&#10;                    throw new Error(`Server error: ${errorData}`);&#10;                } else {&#10;                    throw new Error(`HTTP error! status: ${response.status}`);&#10;                }&#10;            }&#10;&#10;            const text = await response.text();&#10;            showResult(text.replace(/\n/g,'&lt;br&gt;'));&#10;&#10;        } catch (fetchError) {&#10;            if (fetchError.message.includes('Failed to fetch')) {&#10;                showResult('Error: Cannot connect to the backend server. Please ensure that:&lt;br&gt;' +&#10;                    '1. The backend server is running on port 8050&lt;br&gt;' +&#10;                    '2. You have set the GEMINI_API_KEY environment variable&lt;br&gt;' +&#10;                    '3. Check the browser console for more details');&#10;                console.error('Connection error:', fetchError);&#10;            } else {&#10;                showResult('Error: ' + fetchError.message);&#10;            }&#10;        }&#10;&#10;    } catch (error) {&#10;        console.error('Processing error:', error);&#10;        showResult('Error: ' + error.message);&#10;    }&#10;}&#10;&#10;async function showResult(content) {&#10;    document.getElementById('results').innerHTML = `&lt;div class=&quot;result-item&quot;&gt;&lt;div class=&quot;result-content&quot;&gt;${content}&lt;/div&gt;&lt;/div&gt;`;&#10;    // Save the result&#10;    chrome.storage.local.set({ 'lastResults': content });&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>